name: ci-build

on:
  push:
    branches:
      - "*" # This will match all branches
    tags:
      - "*" # This will run only in all tags

jobs:
  build:
    strategy:
      matrix:
        docker_tag:
          - centos8
          - debian-buster
          - debian-stretch
          - fedora-latest
          - fedora31
          - opensuse-leap
          - opensuse-tumbleweed
          - ubuntults
          - ubuntu1910
        os: [ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    env:
      DOCKER_TAG: ${{matrix.docker_tag}}
      PACKAGE_VERSION: ""
      FILE_EXTENSION: ""
      FILE_NAME: ""
      FILE_DIR: "./installer"
    steps:
      - uses: actions/checkout@v2
      - name: Get file extension
        shell: bash
        run: |
          if [[ ${{matrix.os}} =~ macos-latest ]] ; then \
              echo ::set-env name=FILE_EXTENSION::$(echo pkg)
          elif [[ ${{matrix.os}} =~ windows-latest ]] ; then \
              echo ::set-env name=FILE_EXTENSION::$(echo msi)
          else
              if [[ ${{matrix.docker_tag}} =~ debian ]] || [[ ${{matrix.docker_tag}} =~ ubuntu ]] ; then \
                echo ::set-env name=FILE_EXTENSION::$(echo deb)
              else
                echo ::set-env name=FILE_EXTENSION::$(echo rpm)
              fi
          fi
      - if: ${{matrix.os}}=='ubuntu-20.04'
        shell: bash
        name: Build package with docker
        run: |
          docker build --tag fortify-$DOCKER_TAG -f ./docker/Dockerfile.$DOCKER_TAG .
          docker run --name fortify-$DOCKER_TAG fortify-$DOCKER_TAG
          mkdir ./installers
          docker cp fortify-$DOCKER_TAG:/fortify/installer/ ./installer/
          echo ::set-env name=FILE_NAME::$(ls ./installer/)
          if [ "$FILE_NAME" == "installer" ] ; then \
            echo ::set-env name=FILE_NAME::$(ls ./installer/installer/) \ 
            echo ::set-env name=FILE_DIR::$(echo ./installer/installer) \
          else 
            echo ::set-env name=FILE_DIR::$(echo ./installer)
          fi
        continue-on-error: true
      - name: Get package version
        shell: bash
        run: |
          echo ::set-env name=PACKAGE_VERSION::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }'| sed 's/[",]//g'| tr -d '[[:space:]]')
      - uses: actions/upload-artifact@v2
        with:
          name: "${{env.DOCKER_TAG}}-${{env.FILE_NAME}}"
          path: "${{env.FILE_DIR}}/${{env.FILE_NAME}}"
          if-no-files-found: ignore
  build-win:
    strategy:
      matrix: 
        os: [windows-latest]
        node: 12
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Build Application
        run: npm run build && cp package.json ./out/package.json
      - name: Create package
        run: |
          npx electron-packager ./out/ fortify --platform win32 --arch x64 --out ./packages/
          npx electron-installer-windows --config ./config/config.win32.json
        continue-on-error: true
      - uses: actions/upload-artifact@v2
        with:
          name: fortify-windows
          path: "./installer/*"
          if-no-files-found: ignore
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./installers
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./installers/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
